.Net Assignment 1 and 2


1. int x = 10;
if (x = 5)
Console.WriteLine("True");
else
Console.WriteLine("False");


Output - Cannot implicitly convert type 'int' to 'bool'




2. int a = 10, b = 20, c = 30;
if (a > b && a > c)
Console.WriteLine("A is largest");
else if (b > a && b > c)
Console.WriteLine("B is largest");
else
Console.WriteLine("C is largest");


Output- "C is largest"


3. int num = 2;
switch (num + 1) {
case 1: Console.Write("One");
break;
case 2: Console.Write("Two");
break;
case 3: Console.Write("Three");
case 4: Console.Write("Four");
break;
default: Console.Write("Default");
}


Output- Control cannot fall through from one case label ('case 3:â€™)
        Control cannot fall out of switch from final case label ('default:')




4. int x = 0;
if (x)
Console.WriteLine("Hello");
else
Console.WriteLine("World");


Output- Cannot implicitly convert type 'int' to 'bool'


5. bool isTrue = false;
if (isTrue = true)
Console.WriteLine("Yes");
else
Console.WriteLine("No");


Output- Yes


6. int x = 5, y = 10;
if (x > 0)
if (y < 10)
Console.WriteLine("A");
else
Console.WriteLine("B");
else
Console.WriteLine("C");


Output- B


7. int a = 5;
if (a > 0)
if (a < 10)
Console.WriteLine("X");
else if (a > 2)
Console.WriteLine("Y");
else
Console.WriteLine("Z");


Output- X


8. int x = 5, y = 10;
if (x++ > 5 && y++ < 10)
Console.WriteLine(x,y);
else
Console.WriteLine(x,y);


Output- 6, 10


9. double x = 0.1 + 0.2;
if (x == 0.3)
Console.WriteLine("Equal");
else
Console.WriteLine("Not Equal");


Output- Not Equal




10. decimal x = 0.1m + 0.2m;
if (x == 0.3m)
Console.WriteLine("Equal");


Output- Equal




11. for (int i = 1; i <= 5; i++)
{
Console.Write(i + " ");
}


Output- 1 2 3 4 5




12. for (int i = 5; i >= 1; i--)
{
Console.Write(i + " ");
}


Output- 5 4 3 2 1


13. for(int i = 1; i <= 5; i++)
{
if (i == 3)
continue;
Console.Write(i + " ");
}


Output- 1 2 4 5


14. for (int i = 1; i <= 5; i++)
{
if (i == 3)
break;
Console.Write(i + " ");
}


Output- 1 2


15. int i = 1;
while (i <= 3)
{
Console.Write(i + " ");
i++;
}


Output- 1 2 3


16. int i = 1;
while (i > 0)
{
Console.Write(i + " ");
if (i == 3) break;
i++;
}


Output- 1 2 3


17. int i = 5;
do
{
Console.Write(i + " ");
} while (i < 3);


Output- 5


18. for (int i = 1; i <= 3; i++)
{
for (int j = 1; j <= 2; j++)
{
Console.Write(i + "" + j + " ");
}
}


Output- 11 12 21 22 31 32 


19. for (int i = 2; i <= 10; i += 2)
{
Console.Write(i + " ");
}


Output- 2 4 6 8 10
20. int i = 1;
while (i <= 10)
{
Console.Write(i + " ");
i += 2;
}


Output- 1 3 5 7 9
21. int sum = 0;
for (int i = 1; i <= 5; i++)
{
sum += i;
}
Console.Write(sum);


Output- 15
22. int fact = 1;
for (int i = 1; i <= 4; i++)
{
fact *= i;
}
Console.Write(fact);


Output- 24


23. int num = 1234, count = 0;
while (num > 0)
{
count++;
num /= 10;
}
Console.Write(count);


Output- 4


24. int num = 123, rev = 0;
while (num > 0)
{
rev = rev * 10 + num % 10;
num /= 10;
}
Console.Write(rev);


Output- 321
25. for (int i = 1; i <= 5; i++)
{
Console.Write(3 * i + " ");
}


Output- 3 6 9 12 15 
26. int a = 0, b = 1, c;
Console.Write(a + " " + b + " ");
for (int i = 2; i < 5; i++)
{
c = a + b;
Console.Write(c + " ");
a = b;
b = c;
}


Output- 0 1 1 2 3 


27. for (int i = 1; i <= 5; i++)
{
if (i % 2 == 0) continue;
Console.Write(i + " ");
}


Output- 1 3 5 


28. int i = 1;
while (i <= 3)
Console.Write(i++ + " ");


Output- 1 2 3 


29. int num = 123, sum = 0;
while (num > 0)
{
sum += num % 10;
num /= 10;
}
Console.Write(sum);


Output- 6


30. int num = 7, flag = 1;
for (int i = 2; i < num; i++)
{
if (num % i == 0)
{
flag = 0;
break;
}
}
Console.Write(flag == 1 ? "Prime" : "Not Prime");


Output- Prime


.net assignment2
-----------------------

1. Sum of Array Elements
Write a method that returns the sum of an integer array.
Signature: public static int ArraySum(int[] arr)
Example Input: [1, 2, 3, 4, 10, 11]
Output: 31
ans-

public static int ArraySum(int[] arr){
int sum = 0;
for(int i=0; i<arr.length; i++){ 
sum+= arr[i];
}
return sum;
}

2. Find the Missing Number
Given an array of size n-1 containing distinct numbers from 1 to n, find the missing number.
Signature: public static int FindMissNumber(int[] arr, int n)
Example Input: [1, 2, 4, 5, 6], n = 6
Output: 3
ans-  public static int FindMissNumber(int[] arr, int n){

int totalSum = n*(n+1)/2;
int sum = 0;
for(int i=0; i<arr.length; i++){
 sum+=arr[i];
}
return totalSum-sum;
}

3. Reverse an Array in Place
Write a method to reverse an integer array without using extra space.
Signature: public static void ReverseArray(int[] arr)
Example Input: [1, 2, 3, 4]
Output: [4, 3, 2, 1]
ans- public static void ReverseArray(int[] arr)
    {
        int left = 0, right = arr.Length - 1;
        while (left < right)
        {
            (arr[left], arr[right]) = (arr[right], arr[left]);
            left++; right--;
        }
    }


4. Find First Non-Repeating Character in a String
Given a string, find the first non-repeating character.
Signature: public static char FirstUniqueChar(string str)
Example Input: "swiss"
Output: 'w'
ans-  public static char FirstUniqueChar(string str)
    {
        var freq = new Dictionary<char, int>();
        foreach (char c in str) freq[c] = freq.GetValueOrDefault(c, 0) + 1;
        return str.First(c => freq[c] == 1);
    }

5. Find the Majority Element
Find the element that appears more than n/2 times in an array (Boyer-Moore Voting Algorithm).
Signature: public static int MajorityElement(int[] arr)
Example Input: [3, 3, 4, 2, 3, 3, 3, 1]
Output: 3
ans-  public static int MajorityElement(int[] arr)
    {
        int count = 0, candidate = 0;
        foreach (var num in arr)
        {
            if (count == 0) candidate = num;
            count += (num == candidate) ? 1 : -1;
        }
        return candidate;
    }


6. Rotate an Array by K Positions
Rotate an array to the right by k steps.
Signature: public static void RotateArray(int[] arr, int k)
Example Input: [1, 2, 3, 4, 5, 6, 7], k = 3
Output: [5, 6, 7, 1, 2, 3, 4]
ans-  public static void RotateArray(int[] arr, int k)
    {
        k %= arr.Length;
        Array.Reverse(arr);
        Array.Reverse(arr, 0, k);
        Array.Reverse(arr, k, arr.Length - k);
    }


7. Find the Longest Consecutive Sequence
Find the length of the longest sequence of consecutive numbers.
Signature: public static int LongestConsecutive(int[] arr)
Example Input: [100, 4, 200, 1, 3, 2]
Output: 4
ans- public static int LongestConsecutive(int[] arr)
    {
        var set = new HashSet<int>(arr);
        int maxLen = 0;
        foreach (var num in arr)
        {
            if (!set.Contains(num - 1))
            {
                int length = 0;
                while (set.Contains(num + length)) length++;
                maxLen = Math.Max(maxLen, length);
            }
        }
        return maxLen;
    }

8. Find K-th Smallest Element in an Unsorted Array
Find the k-th smallest element without sorting.
Signature: public static int KthSmallestElement(int[] arr, int k)
Example Input: [7, 10, 4, 3, 20, 15], k = 3
Output: 7
ans- public static int KthSmallestElement(int[] arr, int k)
    {
        var minHeap = new SortedSet<(int val, int index)>(arr.Select((v, i) => (v, i)));
        return minHeap.ElementAt(k - 1).val;
    }


9. Find the Maximum Product of Three Numbers
Find the maximum product of any three numbers in an array.
Signature: public static int MaxProductOfThree(int[] arr)
Example Input: [1, 10, -5, 1, -100]
Output: 5000
ans-  public static int MaxProductOfThree(int[] arr)
    {
        Array.Sort(arr);
        return Math.Max(arr[0] * arr[1] * arr[^1], arr[^1] * arr[^2] * arr[^3]);
    }

10. Merge Two Sorted Arrays
Merge two sorted arrays into one sorted array.
Signature: public static int[] MergeSortedArrays(int[] arr1, int[] arr2)
Example Input: [1, 3, 5], [2, 4, 6]
Output: [1, 2, 3, 4, 5, 6]
ans- public static int[] MergeSortedArrays(int[] arr1, int[] arr2) => arr1.Concat(arr2).OrderBy(x => x).ToArray();

11. Find Pair with Given Sum in a Sorted Array
Return indices of two numbers that sum to a target (Two-Pointer approach).
Signature: public static int[] TwoSumSorted(int[] arr, int target)
Example Input: [1, 2, 3, 4, 6], target = 6
Output: [1, 3]
ans- public static int[] TwoSumSorted(int[] arr, int target)
    {
        int left = 0, right = arr.Length - 1;
        while (left < right)
        {
            int sum = arr[left] + arr[right];
            if (sum == target) return new[] { left, right };
            if (sum < target) left++; else right--;
        }
        return new int[0];
    }

12. Find the Peak Element in an Array
Find an element that is greater than its neighbors.
Signature: public static int FindPeakElement(int[] arr)
Example Input: [1, 2, 3, 1]
Output: 3
ans-  public static int FindPeakElement(int[] arr)
    {
        for (int i = 0; i < arr.Length - 1; i++)
            if (arr[i] > arr[i + 1]) return arr[i];
        return arr[^1];
    }

13. Check If an Array is a Subset of Another
Check if arr2 is a subset of arr1.
Signature: public static bool IsSubset(int[] arr1, int[] arr2)
Example Input: [1, 2, 3, 4, 5], [2, 3, 4]
Output: true
ans-  public static bool IsSubset(int[] arr1, int[] arr2) => new HashSet<int>(arr1).IsSupersetOf(arr2);

14. Trapping Rain Water
Calculate how much rainwater can be trapped between bars.
Signature: public static int TrapRainWater(int[] height)
Example Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
ans- public static int TrapRainWater(int[] height)
    {
        int left = 0, right = height.Length - 1, leftMax = 0, rightMax = 0, water = 0;
        while (left < right)
        {
            if (height[left] < height[right])
            {
                leftMax = Math.Max(leftMax, height[left]);
                water += leftMax - height[left];
                left++;
            }
            else
            {
                rightMax = Math.Max(rightMax, height[right]);
                water += rightMax - height[right];
                right--;
            }
        }
        return water;
    }

15. Find the Smallest Window in a String Containing All Characters of Another String
Find the shortest substring in s that contains all characters of t.
Signature: public static string MinWindowSubstring(string s, string t)
Example Input: "ADOBECODEBANC", "ABC"
Output: "BANC"
ans- public static string MinWindowSubstring(string s, string t)
    {
        var count = new Dictionary<char, int>();
        foreach (char c in t) count[c] = count.GetValueOrDefault(c, 0) + 1;
        int left = 0, minLen = int.MaxValue, minStart = 0, needed = t.Length;
        for (int right = 0; right < s.Length; right++)
        {
            if (--count[s[right]] >= 0) needed--;
            while (needed == 0)
            {
                if (right - left + 1 < minLen)
                {
                    minLen = right - left + 1;
                    minStart = left;
                }
                if (++count[s[left++]] > 0) needed++;
            }
        }
        return minLen == int.MaxValue ? "" : s.Substring(minStart, minLen);
    }


16. Find All Anagrams of a String in Another String
Find all start indices of t's anagrams in s.
Signature: public static List<int> FindAnagrams(string s, string t)
Example Input: "cbaebabacd", "abc"
Output: [0, 6]
ans- public static List<int> FindAnagrams(string s, string t)
    {
        var result = new List<int>();
        int[] target = new int[26], window = new int[26];
        foreach (char c in t) target[c - 'a']++;
        for (int i = 0; i < s.Length; i++)
        {
            window[s[i] - 'a']++;
            if (i >= t.Length) window[s[i - t.Length] - 'a']--;
            if (window.SequenceEqual(target)) result.Add(i - t.Length + 1);
        }
        return result;
    }

17. Find the K Closest Numbers to a Target
Find k numbers closest to x in an array.
Signature: public static int[] KClosestNumbers(int[] arr, int k, int x)
Example Input: [1, 2, 3, 4, 5], k = 2, x = 3
Output: [2, 3]
ans- public static int[] KClosestNumbers(int[] arr, int k, int x)
    {
        return arr.OrderBy(num => Math.Abs(num - x)).ThenBy(num => num).Take(k).ToArray();
    }


18. Find Duplicates in an Array
Find all duplicate numbers in an array.
Signature: public static List<int> FindDuplicates(int[] arr)
Example Input: [4, 3, 2, 7, 8, 2, 3, 1]
Output: [2, 3]
ans- public static List<int> FindDuplicates(int[] arr) => arr.GroupBy(x => x).Where(g => g.Count() > 1).Select(g => g.Key).ToList();

19. Find the Longest Palindromic Substring
Find the longest palindrome in a string.
Signature: public static string LongestPalindrome(string s)
Example Input: "babad"
Output: "bab"
ans- private static string ExpandAroundCenter(string s, int left, int right)
    {
        while (left >= 0 && right < s.Length && s[left] == s[right]) { left--; right++; }
        return s.Substring(left + 1, right - left - 1);
    }


20. Find the Median of Two Sorted Arrays
Find the median of two sorted arrays in O(log(n+m)) time.
Signature: public static double FindMedianSortedArrays(int[] nums1, int[] nums2)
Example Input: [1, 3], [2]
Output: 2.0
ans-  public static double FindMedianSortedArrays(int[] nums1, int[] nums2) => nums1.Concat(nums2).OrderBy(x => x).ToArray().Median();
}



